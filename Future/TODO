-> Move part of implementation in the class macro in the class.h header file.

// remove pre_ctor in type and replace with void * holding default object + make pre_ctor static inline && constructor

1-Make up my mind on wether or not toString allocates or not! (or return a String object (* or not)) [ NEEDED FOR FORMAT! ]
2-Dynamic cast with interface / runtime check of implementation of interface & cast
8-create a implI(names...) for RTLL of interfaces
3-Stream type and IToStream interface
5-add python style format from Future folder
6-cout and cerr (f, fln, print, println)
7-cin? : add a fromStream & toStream method in Object || f("",...) && scan(obj)
9-Object_getType segfault safe for instrospection
10-Add a foreach method that yields!
12-Handle nested Objects (without inheritance) //for now only new&delete works there
13-Remove use of generator in for_yield, make it create in for the generator -> for(Generator __this_generator__ = ...)

BONUS?: create pragma that push a new value in a macro name -> would resolve much much bad design!

-1!!-New Idea : glue method name with number of arguments (new function method abi)!!!
	Seemed a good idea but screw everything for va_args!!
	Limit everything to one time and use __isinstanceof
	Maybe okay actually (for_arg/bad_arg/bad_arg/...)
	See : methodNameChange.c

(-fms-extensions for clang => -fplan9-extension)
